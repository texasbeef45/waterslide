@article{dataflow1,
 author = {Johnston, Wesley M. and Hanna, J. R. Paul and Millar, Richard J.},
 title = {Advances in dataflow programming languages},
 journal = {ACM Comput. Surv.},
 volume = {36},
 issue = {1},
 month = {March},
 year = {2004},
 issn = {0360-0300},
 pages = {1--34},
 numpages = {34},
 url = {http://doi.acm.org/10.1145/1013208.1013209},
 doi = {http://doi.acm.org/10.1145/1013208.1013209},
 acmid = {1013209},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {Dataflow, co-ordination languages, component software, data flow visual programming, graphical programming, multithreading, software engineering},
} 

@article{S4,
 author = {Neumeyer,Leonardo and Robbins, Bruce and Nair, Anish and Kesari, Anandsudhakar},
 title = {S4: Distributed Stream Computing Platform},
 journal = {KDCloud},
 month = {December},
 year = {2010},
 publisher = {IEEE},
 keywords = {streaming, streaming map reduce},
} 

@techreport{MapReduceOnline,
    Author = {Condie, Tyson and Conway, Neil and Alvaro, Peter and Hellerstein, Joseph M. and Elmeleegy, Khaled and Sears, Russell},
    Title = {MapReduce Online},
    Institution = {EECS Department, University of California, Berkeley},
    Year = {2009},
    Month = {Oct},
    URL = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2009/EECS-2009-136.html},
    Number = {UCB/EECS-2009-136},
    Abstract = {MapReduce is a popular framework for data-intensive distributed computing of batch jobs. To simplify fault tolerance, the output of each MapReduce task and job is materialized to disk before it is consumed. In this paper, we propose a modified MapReduce architecture that allows data to be pipelined between operators. This extends the MapReduce programming model beyond batch processing, and can reduce completion times and improve system utilization for batch jobs as well.  We present a modified version of the Hadoop MapReduce framework that supports online aggregation, which allows users to see "early returns" from a job as it is being computed. Our Hadoop Online Prototype (HOP) also supports continuous queries, which enable MapReduce programs to be written for applications such as event monitoring and stream processing. HOP retains the fault tolerance properties of Hadoop, and can run unmodified user-defined MapReduce programs.}
}

@incollection{heavyhitters,
   author = {Metwally, Ahmed and Agrawal, Divyakant and Abbadi, Amr},
   affiliation = {Department of Computer Science, University of California, Santa Barbara},
   title = {Efficient Computation of Frequent and Top-k Elements in Data Streams},
   booktitle = {Database Theory - ICDT 2005},
   series = {Lecture Notes in Computer Science},
   editor = {Eiter, Thomas and Libkin, Leonid},
   publisher = {Springer Berlin / Heidelberg},
   pages = {398--412},
   volume = {3363},
   url = {http://dx.doi.org/10.1007/978-3-540-30570-5_27},
   year = {2005}
}
